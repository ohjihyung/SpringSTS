┌──────────────────────────
	1장. 스프링 개발 환경 
└──────────────────────────

	JDK 1.8, TOMCAT 8.5.X , Oracle 11g xe
	이클립스 4.16 , STS 3.9.15	

┌──────────────────────────
	2장. 프로젝트 생성
└──────────────────────────
	
	스프링 MVC 구조 
	
	
		1. 스프링 MVC 구조
			스프링 MVC는 DispatcherServlet, View, Resolver, Handler, View 등으로 구성됨
			
			스프링MVC 요청 처리 흐름도
			[단계별 설명 ]
			
			1) 클라이언트(브라우저)의 요청을 DispatcherServlet이 받는다
			2) 받은 요청을 처리할 수 있는 Handler의 이름을 HandlerMapping에게 물어 본다
			3) HandlerMapping은 요청 URL을 비롯한 여러 요청 정보를 가지고 handler를 판단
			4) DispactherServlet은 HandlerMapping으로 부터 선택받은 Handler에게 요청을 보낸다
			5) Handler는 요청을 적절히 처리하고 응답에서 랜더링해야 하는 View Name을 판단해서 DispactherServlet에게 전송한다
			6) DispactherServlet은 논리적인 View Name을 View Resolver에 전달한다
			7)  View Resolver는 응답에 필요한 View를 생성하여 DispatcherServlet에게 보낸다
			8) DispactcherServlet은  해당하는 View에 Model을 전달한다
			9) View는 Model을 참조해서 응답을 생성한다
			10) DispactherServlet은 생성된 응답을 클라이언트(브라우저)에 반환한다.
			
	
	 2. 스프링 MVC 프로젝트 생성
	         Spring Legacy Project(Spring MVC Project) 생성
	         
	  
	 3. MVC 프로젝트 파일 구성 
	          프로젝트를 새로 생성하면 관련 파일들과 폴더들이 자동으로 생성된다.
	          
	       구성요소
	       - pom.xml                                 		 : 메이븐 프로젝트 빌드 파일
	       - src/main/java  						 		 : 자바 소스 경로
	       - src/main/resources   					 	   	 : 리소스 파일 경로
	       - src/.../WEB-INF/web.xml  						 : 웹 컨테이너 설정 파일
	       - src/.../WEB-INF/spring/root-context.xml   		 : 스프링 설정 파일
	       - src/.../WEB-INF/views   						 : 스프링 웹 설정 파일
	       
	       
	 4. 로그 레벨 설정
	 
	   Log4j 구성 요소 
	    ──────────────────────────────────────────────────    
	          요소             |              설명 
	    ──────────────────────────────────────────────────  
	       Logger			   |   출력할 메세지를 Appender에 전달
	   ──────────────────────────────────────────────────    
	       Appender		       |   전달된 로그를 어디에 출력할 지 결정 ( 콘솔출력, 파일 기록, DB저장)
	   ────────────────────────────────────────────────── 
	       Layout		       |   로그를 어떤 형식으로 출력할지 결정 
	   ──────────────────────────────────────────────────     
	     
	    Log4j 레벨 
	    ──────────────────────────────────────────────────    
	         로그 레벨    |              설명 
	    ────────────────────────────────────────────────── 
	        FATAL         |  아주 심각한 에러가 발생한 상태
	    ──────────────────────────────────────────────────  
	         ERROR        |  어떠한 요청을 처리하는 중 문제가 발생한 상태 
	    ──────────────────────────────────────────────────  
	         WARN	      |  프로그램의 실행에는 문제가 없지만, 항후 시스템 에러의 원인이 될 수 있는 경고성 메세지
	    ──────────────────────────────────────────────────  
	      	 INFO  	      |  어떠한 상태변경과 같은 정보성 메세지
	    ──────────────────────────────────────────────────  
	      	 DEBUG        |  개발시 디버그 용도로 사용하는 메세지 
	    ──────────────────────────────────────────────────  
	        TRACE         |  디버그 레벨이 너무 광범위한것들 해결하기 위해 좀더 상세한 이벤트 나타냄
	    ──────────────────────────────────────────────────  
	     
	    
	     
┌──────────────────────────
	3장. 컨트롤러 요청 매핑
└──────────────────────────
	   
	   1. 요청 경로 매핑
	       @RequestMapping의 value 속성에 요청 경로를 설정한다.
	         - 요청 경로는 반드시 설정해야 하는 필수 정보이다.
	         - 속성이 하나일 때는 속성명을 생략할 수 있다.
	         - 컨트롤러의 클래스 레벨과 메서드 레벨로 지정할 수 있다
	         - 클래스 레벨로 요청 경로를 지정하면 메서드 레벨에서 지정한 기본 경로로 취급된다.
	         - 클래스 래밸의 요청 경로에 메서드 레벨의 요청 경로를 덧붙인 형태가 최종 경로가 된다.
	         
	         [ 요청과 매핑 ]
	         
	          요청 : http://localhost/board/register
	          매핑 : @RequestMapping(value="/board/register")
	          
	       2. 경로 패턴 매핑
	    	    요청 경로를 동적으로 표현이 가능한 경로 패턴을 지정할 수 있다.
	      		  - url 경로 상의 변하는 값을 경로 변수로 취급한다.
	       		  - 경로 변수에 해당하는 값을 파라미터 변수에 설정할 수 있다.
	        
	         [ 요청과 매핑 ]
	         
	          요청 : http://localhost/board/read/100
	          매핑 : @RequestMapping(value="/board/read/{boardNo}")
	   
	   		
	   		3. HTTP 메서드 메핑
	   		
	   		   method 속성을 사용하여 HTTP 메서드를 매핑 조건으로 지정할 수 있다.
	   		   화면으로 응답하는 경우에는 http 메서드로 GET 방식과 POST 방식 두가지를 사용할 수 있다.
	   		   
	   		  [ 요청과 매핑 ]
	         
	          요청 : http://localhost/board/register
	           매핑 : @RequestMapping(value="/board/register", method= RequestMethod.GET)
	           매핑 : @RequestMapping(value="/board/register",method= RequestMethod.POST)
	   
	   		 
	   		 
	   		4. Params 매핑
	   			
	   			요청 파라미터를 매핑 조건으로 지정하는 경우에는 params 속성을 사용한다
	   			
	   			버튼이나 링크에 따라 호출할 메서드를 바꿔야 할때 사용
	   			   
	   		  [ 요청과 매핑 ]
	         
	           요청 : http://localhost/board/get?register
	           매핑 : @RequestMapping(value="/get", method = RequestMethod.GET, params = "register")
	   			  
	   		
	   		 5. Headers 매핑
	   		
	   		   요청 해더를 매핑 조건으로 지정하는 경우에는 headers 속성을 사용한다
	    	
	    	  [ 요청과 매핑 ]
	    		  
	 	 	    요청 : http://localhost/board/100
	 	  	    매핑: @RequestMapping(value="/{boardNo}", method= RequestMethod.PUT, headers = "X-HTTP-Method-Override=PUT")
	 	     	
	   		
	   		 6.Content Type 매핑 
	   		  
	   		   요청의 Content-Type 헤더 값을 매핑조건으로 지정하는 경우에는 consumes 속성을 사용한다
	   		  
	   		   [ 요청과 매핑 ] 
	   		      요청 : http://localhost/board/100
	   		      매핑   @RequestMapping(value="/{boardNo}", method = RequestMethod.POST, consumes = "application/json")
	   		      
	   		 7. Accept 매핑
	   		 
	   			  요청의 Accept 헤더 값을 매핑조건으로 지정하는 경우에는 produces 속성을 사용한다
	   		   
	   		   
	   		   [ 요청과 매핑 ] 
	   		      요청 : http://localhost/board/100
	   		      매핑   @RequestMapping(value="/{boardNo}", method = RequestMethod.GET, produces = "application/json")
	   		
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   	           
	    
	       