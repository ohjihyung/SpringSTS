┌──────────────────────
│	1장. 스프링 개발 환경
└──────────────────────

	JDK 1.8, Tomcat 8.5.x, Oracle 11g xe
	이클립스 4.16, STS 3.9.15
	
┌──────────────────────
│	2장. 프로젝트 생성
└──────────────────────

	스프링 MVC 구조
	
		1. 스프링 MVC 구조
			스프링 MVC는 DispatcherServlet, View Resolver, Handler, View 등으로 구성되어 있다.
			
			스프링 MVC 요청 처리 흐름도
			[단계별 설명]
			1) 클라이언트(브라우저)의 요청을 DispatcherServlet이 받는다.
			2) 받은 요청을 처리할 수 있는 Handler의 이름을 HandlerMapping에게 물어 본다.
			3) HandlerMapping은 요청 URL을 비롯한 여러 요청 정보를 가지고 handler를 판단한다.
			4) DispatcherServlet은 HadlerMapping으로 부터 선택받은 Handler에게 요청을 보낸다.
			5) Handler는 요청을 적절히 처리하고 응답에서 랜더링해야 하는 View Name을 판단해서 DispatcherServlet에게 전송한다.
			6) DispatcherServlet은 논리적인 View Name을 View Resolver에 전달한다.
			7) View Resolver는 응답에 필요한 View를 생성하여 DispatcherServlet에 보낸다.
			8) DispatcherServlet은 해당하는 View에 Model을 전달한다.
			9) View는 Model을 참조해서 응답을 생성한다.
			10) DispatcherServlet은 생성된 응답을 클라이언트(브라우저)에 반환한다.
			
		2. 스프링 MVC 프로젝트 생성
			Spring Legacy Proejct(Spring MVC Project) 생성
			
		3. MVC 프로젝트 파일 구성
			프로젝트를 새로 생성하면 관련 파일들과 폴더들이 자동으로 생성된다.
			
			구성요소
			- pom.xml														: 메이븐 프로젝트 빌드 파일
			- src/main/java													: 자바 소스 경로
			- src/main/resources											: 리소스 파일 경로
			- src/.../WEB-INF/web.xml										: 웹 컨테이너 설정 파일
			- src/.../WEB-INF/spring/root-context.xml						: 스프링 설정 파일
			- src/.../WEB-INF/spring/appServlet/servlet-context.xml			: 스프링 웹 설정 파일
			- src/.../WEB-INF/views											: 뷰 파일 경로
			
		4. 로그 레벨 설정
		
		Log4j 구성 요소
		
			요소				|						설명
		──────────────────────────────────────────────────────────────────────────────────
			Logger			|	출력할 메시지를 Appender에 전달합니다.
		──────────────────────────────────────────────────────────────────────────────────
			Appender		|	전달된 로그를 어디에 출력할 지 결정합니다. (콘솔 출력, 파일 기록, DB 저장 등)
		──────────────────────────────────────────────────────────────────────────────────
			Layout			|	로그를 어떤 형식으로 출력할지 결정합니다.
		──────────────────────────────────────────────────────────────────────────────────
		
		Log4j 레벨
		
			로그레벨			|						설명
		───────────────────────────────────────────────────────────────────────────────────────────────────
			FATAL			|	아주 심각한 에러가 발생한 상태를 나타냅니다.
		───────────────────────────────────────────────────────────────────────────────────────────────────
			ERROR			|	어떠한 요청을 처리하는 중 문제가 발생한 상태를 나타냅니다.
		───────────────────────────────────────────────────────────────────────────────────────────────────
			WARN			|	프로그램의 실행에는 문제가 없지만, 향후 시스템 에러의 원인이 될 수 있는 경고성 메세지를 나타냅니다.
		───────────────────────────────────────────────────────────────────────────────────────────────────
			INFO			|	어떠한 상태변경과 같은 정보성 메시지를 나타냅니다.
		───────────────────────────────────────────────────────────────────────────────────────────────────
			DEBUG			|	개발시 디버그 용도로 사용하는 메시지를 나타냅니다.
		───────────────────────────────────────────────────────────────────────────────────────────────────
			TRACE			|	디버그 레벨이 너무 광범위한것을 해결하기 위해서 좀 더 상세한 이벤트를 나타냅니다.
		───────────────────────────────────────────────────────────────────────────────────────────────────			
			
┌──────────────────────
│	3장. 컨트롤러 요청 매핑
└──────────────────────
			
	1. 요청 경로 매핑
		@RequestMapping의 value속성에 요청 경로를 설정한다.
		- 요청 경로는 반드시 설정해야 하는 필수 정보이다.
		- 속성이 하나일 때는 속성명을 생략할 수 있다.
		- 컨트롤러의 클래스 레벨과 메서드 레벨로 지정할 수 있다.
		- 클래스 레벨로 요청 경로를 지정하면 메서드 레벨에서 지정한 경로의 기본 경로로 취급된다.
		- 클래스 레벨의 요청 경로에 메서드 레벨의 요청 경로를 덧붙인 형태가 최종 경로가 된다.
		
		[요청과 매핑]
		요청 : http://localhost/board/register
		매핑 : @RequestMapping(value="/board/register")
		
	2. 경로 패턴 매핑
		요청 경로를 동적으로 표현이 가능한 경로 패턴을 지정할 수 있다.
		- URL 경로 상의 변하는 값을 경로 변수로 취급한다.
		- 경로 변수에 해당하는 값을 파라미터 변수에 설정할 수 있다.
		
		[요청과 매핑] 
		요청 : http://localhost/board/read/100
		매핑 : @RequestMapping(value="/board/read/{boardNo}")
		
	3. HTTP 메소드 매핑
		method 속성을 사용하여 HTTP 메소드를 매핑 조건으로 지정할 수 있다.
		화면으로 응답하는 경우에는 HTTP 메소드로 GET방식과 POST방식 두가지를 사용할 수 있다.
		
		[요청과 매핑] 	
		요청 : http://localhost/board/register
		매핑 : @RequestMapping(value="/board/register", method=RequestMethod.GET)	
		매핑 : @RequestMapping(value="/board/register", method=RequestMethod.POST)	
			
	4. Params 매핑
		요청 파라미터를 매핑 조건으로 지정하는 경우에는 params 속성을 사용한다.
		버튼이나 링크에 따라 호출할 메서드를 바꿔야 할 때 사용한다.
		
		[요청과 매핑] 	
		요청 : http://localhost/board/get?register
		매핑 : @RequestMapping(value="/board/get", method=RequestMethod.GET, params="register")
		
	5. Headers 매핑
		요청 헤더를 매핑 조건으로 지정하는 경우에는 headers 속성을 사용한다.
		
		[요청과 매핑] 	
		요청 : http://localhost/board/100
		매핑 : @RequestMapping(value="/board/{boardNo}", method=RequestMethod.PUT, headers="X-HTTP-Method-Override=PUT")	
		
	6. Content Type 매핑
		요청의 Content-Type 헤더 값을 매핑 조건으로 지정하는 경우에는 consumes 속성을 사용한다.
		
		[요청과 매핑] 	
		요청 : http://localhost/board/100
		매핑 : @RequestMapping(value="/board/{boardNo}", method=RequestMethod.POST, consumes="application/json")
		
	7. Accept 매핑
		요청 Accept 헤더 값을 매핑 조건으로 지정하는 경우에는 produces 속성을 사용한다.
		
		[요청과 매핑] 	
		요청 : http://localhost/board/100
		매핑 : @RequestMapping(value="/board/{boardNo}", method=RequestMethod.GET, produces="application/json")
		
┌──────────────────────
│	4장. 컨트롤러 응답
└──────────────────────
		
	1. Void 타입
		호출하는 URL과 동일한 뷰 이름을 나타내기 위해 사용한다.
		
		[요청과 응답]
		요청 : http://localhost/goHome0101
		응답 : void (요청한 경로와 동일한 뷰 이름으로 리턴)
		
	2. String 타입
		뷰 파일의 경로와 파일 이름을 나타내기 위해 사용한다.
		
		[요청과 응답]
		요청 : http://localhost/goHome0201
		응답 : String (반환된 값으로 페이지를 찾는다.)
		
	3. 자바빈즈 클래스 타입
		JSON 객체 타입의 데이터를 만들어서 반환하는 용도로 사용한다.
		- jackson-databind 라이브러리를 설치하고 @ReseponseBody를 지정하여 객체를 응답으로 내보낼 수 있다.
		- 둘중에 1개라도 하지 않는 경우, 에러가 발생할 수 있다.
		
		[요청과 응답]
		요청 : http://localhost/goHome0301
		응답 : 자바빈즈 (객체에 값이 담겨 해당 객체를 리턴한다.)
		
	4. 컬렉션 List 타입
		JSON 객체 배열 타입의 데이터를 만들어서 반환하는 용도로 사용한다.
		- 반환값이 컬렉션 List 타입이면 JSON 객체 배열 타입으로 자동으로 반환한다.
		
		[요청과 응답]
		요청 : http://localhost/goHome0401
		응답 : 컬렉션 List
		
	5. 컬렉션 Map 타입
		Map 형태의 컬렉션 자료를 JSON 객체 타입의 데이터로 만들어서 반환하는 용도로 사용한다.
		- 반환값이 컬렉션 Map 타입이면 JSON 객체 타입으로 자동으로 변환한다.
		
		[요청과 응답]
		요청 : http://localhost/goHome0501
		응답 : 컬렉션 Map
		
	6. ResponseEntity<Void> 타입
		response 할 때 HTTP 헤더 정보와 내용을 가공하는 용도로 사용한다.
		- 반환값이 해당 URL이므로 개발자 도구 > 네트워킹 탭을 활용하여 응답된 페이지 정보를 확인할 수 있다.
		
		[요청과 응답]
		요청 : http://localhost/goHome0601
		응답 : ResponseEntity<Void>
		
	7. ResponseEntity<String> 타입
		response 할 때 HTTP 헤더 정보와 문자열 데이터를 전달하는 용도로 사용한다.
		- 페이지에서 결과값으로 문자열을 함께 확인 할 수 있다.
		
		[요청과 응답]
		요청 : http://localhost/goHome0701
		응답 : ResponseEntity<String>
		
	8. ResponseEntity<Member> 타입
		response 할 때 HTTP 헤더 정보와 객체 데이터를 전달하는 용도로 사용한다.
		
		[요청과 응답]
		요청 : http://localhost/goHome0801
		응답 : ResponseEntity<Member>
		
	9. ResponseEntity<List<Member>> 타입
		response 할 때 HTTP 헤더 정보와 객체 배열 데이터를 전달하는 용도로 사용한다.
		
		[요청과 응답]
		요청 : http://localhost/goHome0901
		응답 : ResponseEntity<List<member>>
		
	10. ResponseEntity<Map<String, Member>> 타입
		response 할 때 HTTP 헤더 정보와 객체 데이터를 Map 형태로 전달하는 용도로 사용한다.
		
		[요청과 응답]
		요청 : http://localhost/goHome1001
		응답 : RepsonseEntity<Map<String, Member>>
		
	11. ResponseEntity<byty[]> 타입
		response 할 때 HTTP 헤더 정보와 바이너리 파일 데이터를 전달하는 용도로 사용한다.
		- 파일을 처리하는 경우에는 의존 라이브러리(commons-io)를 추가해야한다.
		- 추가는 pom.xml에서 dependency를 추가한다.
		
		[요청과 응답]
		요청 : http://localhost/goHome1101
			 http://localhost/goHome1102
		응답 : ResponseEntity<byte[]>
		
┌──────────────────────
│	5장. 컨트롤러 요청 처리
└──────────────────────
			
	1. 컨트롤러 메서드 매개변수
	
		주요 매개 변수
		- Model
			이동 대상에 전달할 데이터를 가지고 있는 인터페이스
		- RedirectAttributes
			리다이렉트 대상에 전달할 데이터를 가지고 있는 인터페이스
		- 자바빈즈 클래스
			요청 파라미터를 가지고 있는 자바빈즈 클래스
		- MultipartFile
			Multipart 요청을 사용해 업로드 된 파일 정보를 가지고 있는 인터페이스
		- BindingResult
			도메인 클래스의 입력값 검증 결과를 가지고 있는 인터페이스
		- java.security.Principal
			클라이언트 인증을 위한 사용자 정보를 가지고 있는 인터페이스
	
	2. 요청 처리
	
		1. URL 경로 상의 쿼리 파라미터 정보로부터 요청 데이터를 취득할 수 있다.
		[요청과 처리]
		요청 : /register?userId=hongkd&password=1234 (a태그를 이용)
		처리 : registerByparameter(String userId, String password)			
			
		2. URL 경로 상의 경로 변수로부터 요청 데이터를 취득할 수 있다.
		[요청과 처리]
		요청 : /register/hongkd (a태그를 이용)
		처리 : String registerByPath(String userId)
		
		3. HTML Form 필드명과 컨트롤러 매개변수명이 일치하면 요청 데이터를 취득할 수 있다.
		[요청과 처리]
		요청 : /register01 (form 태그를 이용)
		처리 : String register01(String userId)
		
		4. HTML Form 필드가 여러개일 경우에도 컨트롤러 매개변수명이 일치하면 요청 데이터를 취득할 수 있다.
		[요청과 처리]
		요청 : /register02 (form 태그를 이용)
		처리 : String register02(String userId, String password)
		
		5. HTML Form 필드가 여러개일 경우에 컨트롤러 매개변수의 위치는 상관없다.
		[요청과 처리]
		요청 : /register03 (form 태그를 이용)
		처리 : String register03(String password, String userId)
		
		6. HTML Form 필드값이 숫자일 경우에는 컨트롤러 매개변수 타입이 문자열이면 그대로 문자열 형태로 요청 데이터를 취득한다.
		[요청과 처리]
		요청 : /register04 (form 태그를 이용)
		처리 : String register04(String userId, String password, String coin)
		
		7. HTML Form 필드값이 숫자일 경우에는 컨트롤러 매개변수 타입이 숫자형이면 숫자로 타입변환하여 요청 데이터를 취득한다.
		[요청과 처리]
		요청 : /register05 (form 태그를 이용)
		처리 : String register05(String userId, String password, int coin)
		
	3. 요청 데이터 처리 어노테이션
	
		@PathVariable
		- URL에서 경로 변수 값을 가져오기 위한 어노테이션
		@RequestParam
		- 요청 파라미터 값을 가져오기 위한 어노테이션
		@RequestHeader
		- 요청 헤더 값을 가져오기 위한 어노테이션
		@RequestBody
		- 요청 본문 내용을 가져오기 위한 어노테이션
		@CookieValue
		- 쿠키 값을 가져오기 위한 어노테이션
		
		1. URL 경로 상의 경로 변수로부터 요청 데이터를 취득할 수 있다.
		[요청과 처리]
		요청 : /register/hongkd (a 태그를 이용)
		처리 : String registerByPath(@PathVariable String userId)
		
		2. URL 경로 상의 경로 변수가 여러개일때 @PathVariable 어노테이션을 사용하여 특정한 경로 변수명을 지정해준다.
		[요청과 처리]
		요청 : /register/hongkd/100 (a 태그를 이용)
		처리 : String registerByPath(@PathVariable("userId") String userId, @PathVariable("coin") int coin)
			
		3. HTML 폼의 필드명과 컨트롤러 매개변수명이 일치하면 요청을 처리할 수 있다.
		[요청과 처리]
		요청 : /register0101 (form 태그를 이용 - id name 설정 : userId)
		처리 : String register0101(String userId)
		
		4. HTML Form 필드명과 컨트롤러 매개변수명이 일치(대소문자 구분)하지 않으면 요청을 처리할 수 없다.
		[요청과 처리]
		요청 : /register0201 (form 태그를 이용 - id name 설정 : userId)
		처리 : String register0201(String username)
		
		5. @RequestParam 어노테이션을 사용하여 특정한 HTML Form의 필드명을 지정하여 요청을 처리한다.
		[요청과 처리]
		요청 : /register0202 (form 태그를 이용 - id name 설정 : userId)
		처리 : String register0202(@RequestParam("userId") String username)
		
	4. 요청 처리 자바빈즈
	
		1. 폼 텍스트 필드 요소값을 자바빈즈 매개변수로 처리한다.
		[요청과 처리]
		요청 : /beans/register01 (form 태그를 이용)
		처리 : String registerJavaBeans01(Member member)
		
		2. 폼 텍스트 필드 요소값을 자바빈즈 매개변수와 기존 데이터 타입인 정수 타입 매개변수로 처리한다.
		[요청과 처리]
		요청 : /beans/register02 (from 태그를 이용)
		처리 : String registerJavaBeans02(Member member, int coin)
		
		3. 여러 개의 폼 텍스트 필드 요소값을 매개변수 순서와 상관없이 매개변수명을 기준으로 처리한다.
		[요청과 처리]
		요청 : /beans/registerJavaBeans03(int uid, Member member)
		처리 : String registerJavaBeans03(int uid, Member member)
		
	5. Data 타입 처리
		스프링 MVC는 Date 타입의 데이터를 처리하는 여러 방법을 제공합니다.
		따로 지정하지 않으면 변환에 적합한 날짜 문자열 형식은 yyyy/MM/dd입니다.
		
		1. 쿼리 파라미터(dateOfBirth=1234)로 전달받은 값이 날짜 문자열 형식에 맞지 않아 Date 타입으로 변환에 실패한다.
		[요청과 처리]
		요청 : /registerByGet01?userId=hongkd&dateOfBirth=1234
		처리 : registerByGet01(String userId, Date dateOfBirth)
		
		2. 쿼리 파라미터(dateOfBirth=2022-11-28)로 전달받은 값이 날짜 문자열 형식에 맞지 않아 Date 타입으로 변환에 실패한다.
		[요청과 처리]
		요청 : /registerByGet01?userId=hongkd&dateOfBirth=2022-11-28
		처리 : registerByGet01(String userId, Date dateOfBirth)
		
		3. 쿼리 파라미터(dateOfBirth=20221128)로 전달받은 값이 날짜 문자열 형식에 맞지 않아 Date 타입으로 변환에 실패한다.
		[요청과 처리]
		요청 : /registerByGet01?userId=hongkd&dateOfBirth=20221128
		처리 : registerByGet01(String userId, Date dateOfBirth)
			
		4. 쿼리 파라미터(dateOfBirth=2022/11/28)로 전달받은 값이 날짜 문자열 형식에 맞아 Date 타입으로 변환에 성공한다.
		[요청과 처리]
		요청 : /registerByGet01?userId=hongkd&dateOfBirth=2022/11/28
		처리 : registerByGet01(String userId, Date dateOfBirth)
		[성공!!]
		
		5.Member 매개변수와 쿼리 파라미터(dateOfBirth=20221128) 전달받은 값이 날짜 문자열 형식에 맞지 않아 Date타입으로 변환에 실패한다.
		[요청과 처리]
		요청 : /registerByGet02?userId=honkd&dateOfBirth=20221128
		처리 : String registerByGet02(Member member)
		
		6. Member 매개변수와 폼 방식 ::: 요청 전달받은 값이 날짜 문자열 형식에 맞지 않아 Date 타입으로 변환에 실패한다.
		[요청과 처리]
		요청 : /register (form 태그 이용 - dateOfBirth 값을 20221128 tjfwjd)
		처리 : String register(Member member)
		
	6. @DateTimeFormat 어노테이션
		@DateTimeFormat 어노테이션의 pattern 속성값에 원하는 날짜 형식을 지정할 수 있다.
		
		요청 : 5번 항목에 해당하는 요청 부를 이용하여 테스트 시, 날짜형식 패턴이 'yyyyMMdd'와 같은 형식으로 요청한 경우,
			[성공]으로 정상적인 날짜 데이터를 확인할 수 있다.
		처리 : 5번 항목 참고바랍니다.
		
	7. 폼 방식 요청 처리
	
		1. 폼 텍스트 필드 요소값을 기본 데이터 타입인 문자열 타입 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerUserId
		처리 : String registerUserId(String userId)
		
		2. 폼 텍스트 필드 요소값을 자바빈즈 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerMemberUserId
		처리 : String registerMemberUserId(Member member)
		
		3. 폼 비밀번호 필드 요소값을 자바빈즈 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerPassword
		처리 : String registerPassword(Member member)
		
		4. 폼 라디오버튼 요소ㅛ값을 기본 데이터 타입인 문자열 타입 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerRadio
		처리 : String registerRadio(String gender)
		
		5. 폼 셀렉트 박스 요소값을 기본 데이터 타입인 문자열 타입 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerSelect 
		처리 : String registerSelect(String nationality)
			
		6. 복수 선택이 가능한 폼 셀렉트 박스 요소값을 기본 데이터 타입인 문자열 타입 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerMultipleSelect01
		처리 : String registerMultpleSelect01(String cars)
		[ex) cars=volvo,jeep,bmw]
		
		7. 복수 선택이 가능한 폼 셀렉트 박스 요소값을 문자열 배열 타입 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerMultipleSelect02
		처리 : String registerMultipleSelect02(String[] carArray)
		[ex) carArray[volvo,jeep,bmw] 형태로 들어옴(각 index를 가짐)]
		
		8. 복수 선택이 가능한 폼 셀렉트 박스 요소값을 문자열 요소를 가진 리스트 컬렉션 타입 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerMultipleSelect03
		처리 : String registerMultipleSelect03(ArrayList<String> carList)
		[ex) carList null] ::: 리스트로 값을 가져올 시 null
		
		9. 폼 체크박스 요소값을 기본 데이터 타입인 문자열 타입 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerCheckbox01
		처리 : String registerCheckbox01(String hobby)
		[ex) hobby = Sports,Movie]
		
		10. 폼 체크박스 요소값을 문자열 배열 타입 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerCheckbox02
		처리 : String registerCheckbox02(String[] hobbyArray)
		[ex) hobbyArray[Sports, Movie] 형태로 들어옴(각 index를 가짐)]
		
		11. 폼 체크박스 요소값을 문자열 요소를 가진 리스트 컬렉션 타입 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerCheckbox03
		처리 : String registerCheckbox03(List<String> hobbyList)
		[No primary or default constructor found for interface java.util.List 에러 발생]
		
		12. 폼 체크박스 요소값을 기본 데이터 타입인 문자열 타입 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerCheckbox04
		처리 : String registerCheckbox04(String developer)
		[체크되면 value에 설정된 값, 체크 안되면 null]
		
		13. 폼 체크박스 요소값을 기본 데이터 타입인 불리언 타입 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerCheckbox05
		처리 : String registerCheckbox05(boolean foreigner)
		[체크되면  value에 설정된 값 true, 체크 안되면 false]
		
		14. 폼 텍스트 필드 요소값을 자바빈즈 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerAddress
		처리 : String registerAddress(Address address)
		
		15. 폼 텍스트 필드 요소값을 중첩된 자바빈즈 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerUserAddress
		처리 : String registerUserAddress(Member member)
		
		16. 폼 텍스트 필드 요소값을 중첩된 자바빈즈 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerUserCardList
		처리 : String registerUserCardList(Member member)
		
		17. 폼 텍스트 영역 요소값을 기본 데이터 타입인 문자열 타입 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerTextArea
		처리 : String registerTextArea(String introduction)
		
		18. 폼 텍스트 영역 요소값을 Date 타입 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerDate01
		처리 : String registerDate01(Date dateOfBirth)
		
		19. 폼 텍스트 영역 요소값을 @DateTimeFormat 어노테이션을 지정하여 Date 타입 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerDate02
		처리 : String registerDate02(@DateTimeFormat(patter="yyyyMMdd") Date dateOfBirth)
		
	8. 파일업로드 폼 방식 요청 처리
		**** 중요!!! 
		[ 파일 업로드 폼 방식 요청 처리를 하기 전, 준비사항 ]
		[1]. pom.xml에 commons-fileupload, commons-io 라이브러리 의존 관계 등록
		 - Maven Project Update를 진행하여 업데이트를 합니다.
		   > 업데이트를 진행하지 않는 경우, 내가 등록한 의존관계가 제대로 적용되지 않아 라이브러리를 사용하는데 있어서 에러가 발생할 수 있다.
		   > 업데이트를 진행할 때, 하단 오른쪽에 progress Bar형태가 다운로드 되고 있는 형태로 바뀌고, 100%로 바뀌면 다운로드가 완료되어 적용이 완료된것이다.
		   > Maven Project Update를 진행하였는데 내가 작성하고 있는 프로젝트에서 에러가 발생하고 있다????
		     > 얼른 Clean!!! Clean!!!! Clean!!!!!!!!!!!!!!!!!!!!!
		[2]. web.xml에 모든 경로에 대해서 MultipartFilter를 등록합니다.
		 - 스프링에서 제공하는 MultipartFilter를 이용합니다.
		 
		**** 위와 같은 설정을 진행하였는데도 데어라 나는 경우 조치방법
		[3]. servers > context.xml로 이동하여 Context 태그 옵션을 추가합니다.
		 - [ allowCasualMultipartparsing="true" path="/" ] 옵션 추가 (Context 태그내)
		 - ex) <Context allowCasualMultipartparsing="true" path="/"> ... </Context>
		 
		1. 파일 업로드 폼 파일 요소값을 스프링 MVC가 지원하는 MultipartFile 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerFile01
		처리 : String registerFile01(MultipartFile picture) throws Exception
		
		2. 파일업로드 폼 파일 요소값과 텍스트 필드 요소값을 MultipartFile 매개변수와 문자열 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerFile02
		처리 : String registerFile02(String userId, String password, MultipartFile picture) throws Exception
		
		3. 파일 업로드 폼 파일 요소값과 텍스트 필드 요소값을 MultipartFile 매개변수와 자바빈즈 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerFile03
		처리 : String registerFile03(Member member, MultipartFile picture) throws Exception
		
		4. 파일업로드 폼 파일 요소값과 텍스트 필드 요소값을 FileMember 타입의 자바빈즈 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerFile04
		처리 : String registerFile04(FileMember fileMember) throws Exception
		
		5. 여러개의 파일업로드를 폼 파일 요소값을 여러 개의 MultipartFile 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerFile05
		처리 : String registerFile05(MultipartFile picture, MultipartFile picture2) throws Exception
		
		6. 여러 개의 파일 업로드를 폼 파일 요소값을 MultipartFile 타입의 요소를 가진 리스트 컬렉션 타입 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerFile06
		처리 : String registerFile06(List<MultipartFile> pictureList) throws Exception
		[*** 리스트로 가져오는 경우 null 발생]
		
		7. 여러 개의 파일 업로드 폼 파일 요소값과 텍스트 필드 요소값을 MultipartFileMember 타입의 자바빈즈 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerFile07
		처리 : String registerFile07(MultiFileMember multiFileMember) throws Exception
		
		// 7-2)
		8. 여러개의 파일업로드를 폼 파일 요소값을 MultipartFileMember 타입의 자바빈즈 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerFile07
		처리 : String registerFile07(MultiFileMember multiFileMember) throws Exception
		
		9. 파일업로드 폼 파일 요소값과 텍스트 필드 요소값을 MultipartFile 타입의 배열 매개변수로 처리한다.
		[요청과 처리]
		요청 : /registerFile08
		처리 : String registerFile08(MultipartFile[] pictureList) throws Exception
		
	9. Ajax 방식 요청 처리
	
		1. URL 경로 상의 경로 변수값을 @PathVariable 어노테이션을 지정하여 문자열 매개변수로 처리한다.
		[요청과 처리]
		요청 : /ajax/register/hongkd
		처리 : ResponseEntityMString> ajaxRegister01(@PathVariable("userId") String userId)
		
		2. URL 경로 상의 여러개의 경로 변수값을 @PathVariable 어노테이션을 지정하여 여러개의 문자열 매개변수로 처리한다.
		[요청과 처리]
		요청 : /ajax/register/hongkd/pw01
		처리 : ResponseEntityMString> ajaxRegister02(@PathVariable("userId") String userId, 
											@PathVariable("password") String password)
											
		3. 객체 타입의 JSON 요청 데이터를 @RequestBody 어노테이션을 지정하여 자바빈즈 매개변수로 처리한다.
		[요청과 처리]
		요청 : /ajax/register03
		처리 : ResponseEntity<String> ajaxRegister03(@RequestBody Member member)
		
		4. 객체 타입의 JSON 요청 데이터는 문자열 매개변수로 처리할 수 없다.
		[요청과 처리]
		요청 : /ajax/register04
		처리 : ResponseEntity<String> ajaxRegister04(String userId)
		[실패!! 기본 타입으로는 데이터 받을 수 없음]
		
		5. 요청 URL 에 쿼리 파라미터를 붙여서 전달하면 문자열 매개변수로 처리한다.
		[요청과 처리]
		요청 : /ajax/register05?userId=user01
		처리 : ResponseEntity<String> ajaxRegister05(String userId, String password)
		[넘겨받은 userId는 값을 받고, password는 값을 받지 못한다.]
		
		6. 객체 타입의 JSON 요청 데이터를 @PathVariable 어노테이션을 지정한 문자열 매개변수와 @ReuqestBody 어노테이션을 지정한 자바빈즈 매개변수로 처리한다.
		[요청과 처리]
		요청 : /ajax/register/hongkd
		처리 : ResponseEntity<String> ajaxRegister06(@PathVariable("userId") String userId, 
													@RequestBody Member member)
													
		7. 객체 배열 타입의 JSON 요청 데이터를 자바빈즈 요소를 가진 리스트 컬렉션 매개변수에 @RequestBody 어노테이션을 지정하여 처리한다.
		[요청과 처리]
		요청 : /ajax/register07
		처리 : ResponseEntity<String> ajaxRegister07(@RequestBody List<Member> memberList)
		
		8. 중첩된 객체 타입의 JSON 요청 데이터를 @RequestBody 어노테이션을 지정하여 중첩된 자바빈즈 매개변수로 처리한다.
		[요청과 처리]
		요청 : /ajax/register08
		처리 : ResponseEntity<String> ajaxRegister07(@RequestBody Member member)
		
		9. 중첩된 객체 타입의 JSON 요청 데이터를 @RequestBody 어노테이션을 지정하여 중첩된 자바빈즈 매개변수로 처리한다.
		[요청과 처리]
		요청 : /ajax/register09
		처리 : ResponseEntity<String> ajaxRegister07(@RequestBody Member member)
		
	10. 파일업로드 Ajax 방식 요청 처리
		
		1. Ajax 방식으로 전달한 파일 요소값을 스프링 MVC가 지원하는 MultipartFile 매개변수로 처리한다.
		[요청과 처리]
		요청 : /ajax/uploadAjax
		처리 : ResponseEntity<String> uploadAjax(MultipartFile file)
		> input type='file' change이벤트를 이용한 비동기 파일 업로드로 업로드 한 이미지가 서버로 넘어가고 결과값으로 'UPLOAD SUCCESS'를 얻어오면
		  img 태그에 preview 항목으로 내가 업로드한 이미지를 썸네일로 미리 볼 수 있는 기능을 구현
		  



 6장. 데이터 전달자 모델
 
    1. 모델객체
        Model 객체는 뷰(view)에 컨트롤러에서 생성된 데이터를 담아서 전달하는 역할을 한다
        
        1. Model 객체의 addAttribute() 메서드를 호출하여 데이터를 전달한다.
        [요청과 처리]
        
        요청 : /
        처리 : home(Locale locale, Model model)
               model.addAttribute("serverTime", formatterDate)
             
     
     
     2. 모델을 통한 데이터 전달
     	Model 객체를 통해서 다양한 데이터를 뷰에 전달할 수 있다.
     	
     	
     	1. 매개변수에 선언된 Model 객체의 addAttribute() 메서드를 호출하여 데이터를 뷰에 전달한다.
     	[요청과 처리]
     	
     	요청 : /read01
     	처리 : 	public String read01(Model model) {
				logger.info("read01");
		
				model.addAttribute("userId", "hongkd");
				model.addAttribute("password", "1234");
				model.addAttribute("email", "aaa@vbbb.com");
				model.addAttribute("userName", "홍길동");
				model.addAttribute("birthday", "2022-11-21");
		     	
		2. Model 객체에 자바빈즈 클래스 객체를 값으로만 전달할 때는 뷰에서 참조할 이름 클래스명의 앞글자를 소문자로 변환하여 처리한다.
		[요청과 처리 ]
		요청 : /read02
		
		처리 :	logger.info("read02");
				Member member = new Member();
				member.setUserId("hong");
				member.setPassword("1234");
				member.setUserName("홍길동");
				member.setEmail("aaa@vvv.com");
				member.setBirthDay("2022-11-23");
				
				Calendar cal = Calendar.getInstance();
				cal.set(Calendar.YEAR, 2020);
				cal.set(Calendar.MONDAY, 10);
				cal.set(Calendar.DAY_OF_MONTH, 7);
				
				member.setDateofBirth(cal.getTime());
				model.addAttribute(member);
		
		
		3. Model 객체에 자바빈즈 클래스 객체를 특정한 이름을 지정하여 전달할 수 있다.
		[요청과 처리]
		
		요청 : /read03
		
		처리 :	public String read03(Model model) {
		
				logger.info("read03");
				Member member = new Member();
				member.setUserId("hong");
				member.setPassword("1234");
				member.setUserName("홍길동");
				member.setEmail("aaa@vvv.com");
				member.setBirthDay("2022-11-23");
				
				Calendar cal = Calendar.getInstance();
				cal.set(Calendar.YEAR, 2020);
				cal.set(Calendar.MONDAY, 10);
				cal.set(Calendar.DAY_OF_MONTH, 7);
				
				member.setDateofBirth(cal.getTime());
				model.addAttribute("user", member);
				
				return "member/read03";
				}
	
		4.) Model 객체를 통해 배열과 컬랙션 객체를 전달할 수 있다.
		[요청과 처리]
		
		요청 : /read04
		처리 : public String read04(Model model) {
		
				logger.info("read04");
				
				String[] carArray = {"benz", "bmw"};
				
				List<String> carList = new ArrayList<String>();
				carList.add("benz");
				carList.add("bmw");
				
				String[] hobbyArray = {"music", "movie"};
				
				List<String> hobbyList = new ArrayList<String>();
				hobbyList.add("music");
				hobbyList.add("movie");
						
				model.addAttribute("carArray", carArray);
				model.addAttribute("carList", carList);
				model.addAttribute("hobbyArray", hobbyArray);
				model.addAttribute("hobbyList", hobbyList);
				
				return "member/read04";
			}
			
	
		5.Model 객체를 통해 중첩된 자바빈즈 클래스 객체를 전달할 수 있다.
		[요청과 처리]
		
		요청 : /read05
		처리 :	public String read05(Model model) {
				
				Member member = new Member();
				
				Address address = new Address();
				address.setLocation("seoul");
				address.setPostCode("12345");
				
				List<Card> cardList = new ArrayList<Card>();
				
				Card card1 = new Card();
				card1.setNo("123456");
				
				
				Calendar cal = Calendar.getInstance();
				cal.set(Calendar.YEAR, 2020);
				cal.set(Calendar.MONTH, 8);
				cal.set(Calendar.DAY_OF_MONTH, 8);
				card1.setValidMonth(cal.getTime());
				cardList.add(card1);
				
				Card card2 = new Card();
				card2.setNo("321412");
				
				
				Calendar cal2 = Calendar.getInstance();
				cal2.set(Calendar.YEAR, 2021);
				cal2.set(Calendar.MONTH, 11);
				cal2.set(Calendar.DAY_OF_MONTH, 7);
				card2.setValidMonth(cal2.getTime());
				cardList.add(card2);
				
				
				member.setCardList(cardList);
				member.setAddress(address);
				model.addAttribute("user", member);
		
				return "member/read05";
				
			}
			
		6) Model 객체를 통해 다양한 타입의 값을 전달할 수 있다.
		[요청과 처리 ]
		
		요청 : /read06
		처리 : String read06(Model model)
			model.addAttribute("user", member)
			
			


3. @ModelAttribute 어노테이션
	 @ModelAttribute 어노테이션은 전달받은 매개변수를 강제로 Model에 담아서
	  전달하도록 할 때 필요한 어노테이션
    
    
    1. 기본 자료형은 매개변수로 선언하더라도 기본적으로 전달되지 않는다
    [요청과 처리 ]
		
		요청 :/modelattribute/register01
		처리 :public String register01(String userId){
    
    2. 기본 자료형인 매개변수에 @ModelAttribute 어노테이션을 지정해 데이터 전달
    [요청과 처리 ]
		
		요청 :/modelattribute/register02
		처리 : public String register02(@ModelAttribute("userId") String userId)
	
	
	3.기본 자료형인 매개변수가 여러 개인 경우에 각각 매개변수에 @ModelAttribute 어노테이션을 지정해 데이터 전달
	[요청과 처리]
	
		요청:/modelattribute/register03
		처리:public String register03(@ModelAttribute("userId") String userId,
							 @ModelAttribute("password") String password)
							 
	
	4.자바빈즈 규칙에 맞는 객체는 매개변수로 선언하면 기본적으로 전달
	[요청과 처리]
	
	요청 : /modelattribute/register04
	처리:	public String register04(Member member) 
	
	
	5.자바빈즈 규칭에 맞는 객체는 매개변수로 선언하면 기본적으로 전달된다 
	[요청과 처리]
	
	요청 : /modelattribute/register05
	처리:	public String register05(Member member) 
	      - Member 클래스 안에 있는 Address까지 출력 예시
	

4. RedirectAttributes 타입 
        RedirectAttributes는 일회성 데이터를 전달하는 용도로 사용돤다.
        
       1. 일회성으로 데이터 전달
       
       [요청과 처리]
       
       요청 :/redirectattribute/register
       
	   처리 :public String register(Member member, RedirectAttributes redirectAttributes) {
				logger.info("register");
			
					//flash == 번개 번쩍 일회성 
					redirectAttributes.addFlashAttribute("msg","success");
					return "redirect:/redirectattribute/result";
		}
	
	
		
┌──────────────────────
│	7장. JSP 
└──────────────────────	


		JSPHomeController
		home/home01, 02, 03
		
		
		1. 지시자 
			지시자(directive)는 JSP 페이지에 대한 설정 정보를 지정할 때 사용한다
			JSP가 제공하는 지시자에는 page 지시자, taglib 지시자, include 지시자로 세가지가 있다.
			
			1)page 지시자
			-JSP 페이지에 대한 정보를 지정한다
			
				속성 			   |    설명
			└──────────────────────	└──────────────────────	
			  contentType          |  JSP가 생성할 문서의 mime 타입과 문자 코드를 지정한다.
			  pageEncoding         | JSP 페이지 자체의 문자 코드를 지정한다
			  session              | JSP 페이지가 세션을 사용할지의 여부를 지정한다
			  import               | JSP 페이지에서 사용할 자바 클래스를 지정한다.
			  
			  
			  
			  [요청과 처리]
			  
			  요청 :/home01
			  처리 : String home01(Locale locale, Model model)
			  
			  
			  2. taglib 지시자
			   - JSP 페이지에서 사용할 태그 라이브러리를 지정한다.
			  	
				속성 			   |    설명
			└──────────────────────	└──────────────────────	
			   prefix			   |   태그 라이브러리를 호출할 때 사용할 접두어를 지정한다
			   uri				  |   TLD 파일이 위치한 uri 혹은 파일 경로를 지정한다.
			   
			   
			     
			  [요청과 처리]
			  
			  요청 :/home02
			  처리 : String home02(Locale locale, Model model)
			  
			3. include 지시자
			   - JSP 페이지의 특정 영역에 다른 문서를 포함한다.
			  	
				속성 			   |    설명
			└──────────────────────	└──────────────────────	
			  file                |  포함할 파일의 경로를 지정한다.
			  
			  
			 [요청과 처리]
			  
			  요청 :/home03
			  처리 : String home03(Locale locale, Model model)
			  
	   
	   2. 스크립틀릿
	   		스크립틀릿(scriptlet)은 JSP 페이지에서 자바 코드를 실행 할 때 사용하는 코드의 블록이다
	   		스크립틀릿 코드 블록은 "<%"와 "%>" 사이, 그리고 "<%="와 "%>" 사이의 자바 코드를 포함할 수 있다.
	   		현재는 스크립틀릿 사용보단 JSTL 같이 커스텀 태그 라이브러리와 EL을 조합해 JSP 구현 
	   	
	   		[요청과 처리]
			  
			  요청 :/home01
			  처리 : String home01(Locale locale, Model model)
	   			> 리턴되는 페이지에서 'home/home01' 처리 : <%=serverTime %>으로 스크립틀릿 이용해 데이터 출력
	   			
	   			
	   3. 커스텀 태그 라이브러리
	   		스크립트 요소가 많아지면 JSP 코드 복잡해짐
	   		이 문제 해결 방법 한가지 -> 커스텀 태그 사용
	   		커스텀 태그 사용하면 뷰를 표시하기 위한 로직을 공동화하거나, 표현복잡 로직을 캡슐화
	   		할수있어 JSP 구현 코드를 간결하게 만들 수 있다.
	   		그리고 커스텀 태그를 모아 놓는 것을 커스텀 태그 라이브러리라고 합니다.
	   		
	   		[대표적인 태그 라이브러리]
	   		
	   		JSTL(JAVASERVER PAGES STANDARD TAG LIBRARY)
	   		- JSP 표준 태그 라이브러리
	   		EX) <c:out >   <c:foreach>  <c:set> 등
	   		
	   		
	   		spring-form JSP Tag Library
	   		- 스프링 MVC가 제공하는 HTML 폼용 테그 라이브러리
	   		- 나중에 스프링 폼에서 주로 사용
	   		
	   		EX) <form:form modelAttribute="member"></form:form>
	   			<form:input path="userId"/>
	   			<form:input path="password"/>
	   			<form:input path="userName"/>
	   		
			  
			spring JSP Tag Library
			- 스프링 MVC가 제공하는 범용 태그 라이브러리 및 EL 함수
			
			spring Security JSP Tag Library
			 - 스프링 시큐리티가 제공하는 인증 및 인가용 태그 라이브러리
			 - 나중에 스프링 시큐리티에서 주로 사용
			 
			 ex) <sec:authorize access="isAnonoymous()"></sec:authorize>
			 
			 

	[4 참고 소스 ] -----------------------------------------------
	
			Controller : JSPHomeController
			JSP : home/home0101 ~ home0401
	
	-----------------------------------------------------
	
	
	4. 표현언어 (EL)
	
			JSP는 EL (expression language)이라는 표현 언어를 사용해 값의 참조,
			출력,연산을 할 수 있습니다.
			
			el식은 ${..} or #{..} 형식으로 작성
			
			
			1. 객체 참조
			  - EL을 사용하여 객체를 조회하는 방법은 다음과 같다
			    > 자바빈즈 프로퍼티를 조회하는 경우 "속성명.프로퍼티명"을 지정한다.
			    > 리스트난 배열 요소를 조회하는 경우 "속성명[요소위치]"를 지정한다.
			    > 맴 요소를 조회하는 경우 "속성명.키명" 또는 "속성명[키명]"을 지정.
			   
			   
			2. 사용 가능한 연산자 
			  - EL애서는 다음과 같은 연산지를 사용할 수 있다.
			  
			    #산술 연산자
			        +  |  -   |  *   |   /(div)   |    %(mov)
			     더하기| 빼기 |곱하기|  나누기     | 나머지             | 
			     
			   # 비교 연산자
			   
			   연산자    |          설명 
			   -------------------------------------
			   
			   ==(eq)    |  같은 값인지 비교한다.
			   
			   !=(ne)    |  다른 값인지 비교한다.
			  	
			   <=(le)    |  왼쪽이 작거나 같은지 비교한다 
			   
			   >=(ge)    |  왼쪽이 크거나 같은지 비교한다 

			   <(lt)    |  왼쪽이 작은 값인지 비교한다 

			   >=(gt)    |  왼쪽이 큰 값인지 비교한다 
			   
			   
			   #empty 연산자
			     - null 이거나 공백(문자열 경우 공백 문자) 인지 비교
			     
			    [true 조건 :::]
			     - null 값 , 빈문자열(""), 길이가 0인배열, 빈 collection
			     
			     
			     
			   #논리연산자
			   
			   연산자   |   설명
			   &&(and)	|   두 피연산자 모두 true이면 불값 true반환 아니면 false
			   ||(or)	|	두 피연산자 둘중 하나 or 모두 true 이면 true, 아님 false
			   !(nor) 	|	해당 피 연산자의 의미를 반대로 바꿈
			   
			   
			   
			  [5,6 참고 소스] -------------------------------------------
				
				Controller : JSPTagHomeController
				JSP : home/jsptag/*
				-------------------------------------------------			  
			  
			  
		5. 표준 태그 라이브러리(jstl)
			많은 개발자들이 JSP에서 코드를 깔끔하게 작성하기 위해 커스텀 태그 만듬
			 -중복되는 노력을 없에기위해 만듬
			 
		
			1. core 태그 라이브러리
			
			요소       |                      설명 
		<c:out>		   |  JspWriter에 값을 적절하게 처리한 후에 출력
		<c:set>		   |  jsp에서 사용할 변수를 설정 (값에 따른 변수 설정)
		<c:remove>     |   설정한 변수 제거
		<c:catch>      |   예외를 처리한다.
		<c:if>		   |    조건을 지정하고 지정된 조건과 일치하는 처리 내용 구현
		<c:choose>     |   여러 조건을 처리할 때 사용한다
		<c:when>       |  여러 조건을 지정하고 지정한 조건과 일치하는 처리 내용 구현  <c:choose>요소에서 사용
		<c:otherwise>  |  <c:when> 요소에서 지정한 조건에 모두 일치하지 않을 때 처리할 내용 구현 
						  <c:choose> 요소에서 사용 
						  
		<c:forEach>	   |   컬랙션이나 배열의 각 항목을 처리할 때 사용한다.
		<c:forTokens>  |  구분자로 구분된 각각의 토큰을 처리할 때 사용
		<c:import>     |  URL을 사용해 다른 자원을 삽입한다.
		<c:url>		   |  url을 제작성한다.
		<c:redirect>   |  지정한 URL에 리다이렉트한다.
		<c:param>	   |  파라미터를 지정한다.
		 
		 
		[taglib 지시자 사용 모습 :: <%@ taglib url="http://java.cum.com/jsp/jstl/core" prefix ="c" %>]
		
		
		2.fmt 태그 라이브러리
		
				요소        |                 설명 
		------------------------------------------------------------------
		<fmt:formatNumber>  |  숫자를 형식화한다.
		<fmt:parseNumber>   |  문자열을 숫자로 변환한다.
		<fmt:formatDate>    |  Date 객체를 문자열로 변환한다.
		<fmt:parseDate>     |  문자열을 Date 객체로 변환한다.
		
		
		[taglib 지시자 사용 모습 :: <%@ taglib url="http://java.cum.com/jsp/jstl/fmt" prefix ="fmt" %>]
	
	
		
		3. function 태그 라이브러리
		
		    	
				요소        |                 설명 
		------------------------------------------------------------------
	  	<fn:contains>       |  지정한 문자열이 포함되 있는지 판단
		<fn:containsIgnoreCase> | 지정한 문자열이 대문자/소문자를 구분하지않고 포함되있는지 판단 
		<fn:startsWith>  |  지정한 문자열로 시작하는지 판단
		<fn:endsWith>    | 지정한 문자열로 끝나는지 판단
		<fn:indexOf>     |  지정한 문자열이 처음으로 나왔을 때의 인덱스 구함
		<fn:length> 	 |  컬랙션 또는 배열의 요소 개수, 문자열 길이를 구한다
		<fn:escapeXml>	 |  지정한 문자열 xml 구문으로 해석되지 않도록 이스케이프 함
		<fn:replace> 	 | 문자열 치환한다
		<fn:toLowerCase> | 문자열을 소문자로 다 변경
		<fn:toUpperCase> | 문자열을 대문자로 다 변경 
		<fn:trim> 	   	 | 문자열 양 끝을 trim한다 (공백 제거)
		<fn:substring> 	 | 지정한 범위에 해당하는 문자열 잘라냄
		<fn:substringAfter> | 지정한 문자열에서 일치하는 이후의 문자열 잘라냄
		<fn:substringBefore> | 지정한 문자열에 일치하는 이전의 문자열을 잘라냄
		<fn:split >      | 문자열을 구분자로 분할해서 문자열 배열을 만든다
		<fn:join>        | 문자열 배열을 결합해서 하나의 문자열을 만든다
	
	[taglib 지시자 사용 모습 :: <%@ taglib url="http://java.cum.com/jsp/jstl/functions" prefix ="fn" %>]
		


	
	6.코어 태그
	  
	  조건분기나 반복처리 그리고 변수의 지정 등과 같이 논리적인 처리를 위해 사용되는 스크립트 코드를 대체하기 위한 태크를 제공
	  
	     1. <c:out>
	     JspWriter에 값을 적절하게 처리한 후에 출력
	     
	     	속성   |    타입    |  설명 
	     --------------------------------
	     value	   |  Object    |  출력값
		escapeXMl  |  boolean   | 특수 문자를 변환할지 여부
		default    |  Object	| value의 결과값이 null인 경우 출력할 값
		
		
	     2. <c:set>
	     Jsp에서 사용할 변수를 설정
	     
	     	속성   |    타입    |  설명 
	     --------------------------------
	     value	   |  Object    |  변수에 할당 할 값
		  var      |  String    |  EL 변수 이름
		 scope     |  Object	|  변수를 생성할 영역, 기본값은 page
		 target    |  Object    | 프로퍼티 값을 설정할 객체 지정
		 property  |  String    |  프로퍼티 이름

		
		
		
	     3. <c:remove>
	    설정한 변수를 제거
	     
	     	속성   |    타입    |  설명 
	     --------------------------------
	       var     |  String    | 삭제할 EL 변수 이름
	       scope   |  String    | 삭제할 변수가 포함된 영역 
	       
	       
		
		
	     4. <c:catch>
	     예외를 처리한다.
	     
	     	속성   |    타입    |  설명 
	     --------------------------------
	       var     |  String    | 예외를 저장할 EL 변수 이름
	
	       
		
		
	     5. <c:if>
	   	조건을 지정하고 지정된 조건과 일치하는 처리 내용을 구현한다.
	     
	     	속성   |    타입    |  설명 
	     --------------------------------
	       test    |  boolean   |  검사조건 
	       var     |  String    | 검사조건의 계산 결과값을 저장할 EL 변수
	       scope   |  String    | 삭제할 변수가 포함된 영역 
	       
	
	     6. <c:choose>
	   		여러 조건을 처리할 때 사용한다.
	     
	       
	
	     7. <c:when>
	   		여러 조건을 지정하고 지정한 조건과 일치하는 처리 내용을 구현한다.
	    	 <c:choose>요소에서 사용한다.
	     
	     	속성   |    타입    |  설명 
	     --------------------------------
	       test    |  boolean   |  검사조건 
	       var     |  String    | 검사조건의 계산 결과값을 저장할 EL 변수
	       scope   |  String    | 삭제할 변수가 포함된 영역 
	       
	
	     
	     8.<c:otherwise>
	     	
	     	<c:when> 요소에서 지정한 조건에 모두 일치하지 않을 때 처리할 내용을 구현한다.
	     	<c:choose> 요소에서 사용한다.
	     	
	    
	    9. <c:forEach>
	    	컬랙션이나 배열의 각 항목을 처리할 때 사용한다.   
		
	     	속성   |    타입    |  설명 
	     --------------------------------
	       var     |  boolean    | 몸체에서 사용할 EL 변수 이름
	       items   |  String    | 반복 처리할 데이터
	      varStatus|  String    |  루프 상태를 저장할 EL 변수 이름
	      begin    |  String    |  시작 인덱스 값 
	      end      |  String    |  끝 인덱스 값
	      step     |  String    |  인덱스 증분 값 
	      
	      
	   10. <c:forTokens>
	   	구분자로 구분된 각각의 토큰을 처리할 때 사용한다.  
	      
	     	속성   |    타입    |  설명 
	     --------------------------------
	       var     |  boolean    | 몸체에서 사용할 EL 변수 이름
	       items   |  String    |  구분자로 구분 처리할 데이터
	      delims   |  String    |  구분자 
	     varStatus |  String    |   루프 상태를 저장할 EL 변수 이름
	      begin    |  String    |  시작 인덱스 값 
	      end      |  String    |  끝 인덱스 값
	      step     |  String    |  인덱스 증분 값 
	      
	       
	 
	 11. <c:import>
	   
		    
	     	속성   |    타입    |  설명 
	     --------------------------------
		   url     | boolean    | 읽어올 url
		   var     | boolean    | 읽어온 결과를 저장할 변수 이름
		   scope   | boolean    |  변수를 저장할 영역 
		charEncoding| boolean   | 결과를 읽어올 때 사용할 캐릭터 인코딩
		
		
		url 속성값의 두 가지 타입 
		   - 절대 URL : 완전한 URL   http://news.naver.com/main/123
		   
		   - 상대 URL : 
		       > 웹 어플리케이션 내에서의 절대 경로 : 슬레시 (/)로 시작합니다
		          EX> /board/list.jsp
		      > 현재 jsp에 대한 상대 경로  : 슬래시(/)로 시작하지 않음  
		      	ex >  ../board/list.jsp
		      	


	12. <c:url>
		url을 제작한다.
		
			    
	     	속성   |    타입    |  설명 
	     --------------------------------
		   value   | boolean    | 읽어올 url
		   var     | boolean    | 읽어올 결과를 저장할 변수 이름
		   scope   | boolean    |  변수를 저장할 영역 
		
		
		value  속성값의 두 가지 타입 
		   - 절대 URL : 완전한 URL   http://news.naver.com/main/123
		   
		   - 상대 URL : 
		       > 웹 어플리케이션 내에서의 절대 경로 : 슬레시 (/)로 시작합니다
		          EX> /board/list.jsp
		      > 현재 jsp에 대한 상대 경로  : 슬래시(/)로 시작하지 않음  
		         	ex >  ../board/list.jsp
		   
		   웹 어플리케이션 내에서의 절대 경로를 사용할 경우 실제로 생성되는 url은 컨텍스트 경로를 포함합니다.
		   
		   
	13.<c:redirect>
		지정한 url에 리다이렉트 합니다.
	
	     	속성   |    타입    |  설명 
	     --------------------------------
		   url   | boolean    |  리다이렉트 할 url
		  context | boolean   |  컨텍스트 경로 
		  
		  

	14.<c:param>
	      파라미터를 지정한다
		      	
	     	속성   |    타입    |  설명 
	     --------------------------------
		   name   | boolean    |  파라미터 이름
		  value   | boolean   |  파라미터 값
		  
		  

 7. 숫자 및 날짜 포멧팅 처리 태그
   숫자 및 날짜의 포맷팅과 관련된 태그이다.
   
      
      
     
      
      1. <fmt:formatNumber>
          숫자를 형식화 한다.
          	      	
	     	속성   |    타입    |  설명 
	     --------------------------------
		  value    |  String of Number   | 서식에 맞춰 출력할 숫자
		  type     |  String    | 어떤 서식으로 출력할지 지정
		  pattern  |  String    |  직접 숫자를 출력할  서식 지정
		  var      |  String    |  포멧팅 결과를 지정할 변수 이름을 지정
		  
		  
	type 속성  : number, currency, percent가 올 수 있다 currenct 일 경우 통화 형식으로 출력.
	기본값은 number
	
	   2. <fmt:parseNumber>
          문자열을 숫자로 변환
          	      	
	     	속성   |    타입    |  설명 
	     --------------------------------
		  value    |  String    | 파싱할 문자열 
		  type     |  String    | value 속성의 문자열 타입을 지정
		  pattern  |  String    | 파싱할 때 직접 사용할 서식 지정
		  var      |  String    |  파싱한 결과를 지정할 변수 이름을 지정
		 
	 type 속성  : number, currency, percent가 올 수 있다.
	기본값은 number
		  
	3.<fmt:formatDate>
	
		Date 객체를 문자열로 변환한다.
		
	   	속성   |    타입    |  설명 
	     --------------------------------
		  value    |  java.util.date  | 포멧팅할 날짜 및 시간 값
		  type     |  String    | 날짜, 시간 또는 둘 다 포멧팅 할지의 여부 지정
		  dataStyle| String     | 날짜에 대해 미리 정의된 포멧팅 스타일을 지정
		  timeStyle| String     | 시간에 대해 미리 정의된 포멧팅 스타일을 지정
		  pattern  |  String    | 파싱할 때 직접 사용할 서식 지정
		  var      |  String    |  파싱한 결과를 지정할 변수 이름을 지정
		 
 
			      
	4.<fmt:parseDate>
	
	문자열을 DATE 객체로 변환
		
	   	속성   |    타입    |  설명 
	     --------------------------------
		  value    |  String  |   파싱할 문자열
		  type     |  String    | 날짜, 시간 또는 둘 다 포멧팅 할지의 여부 지정
		  dataStyle| String     | 날짜에 대해 미리 정의된 포멧팅 스타일을 지정
		  timeStyle| String     | 시간에 대해 미리 정의된 포멧팅 스타일을 지정
		  pattern  |  String    | 파싱할 때 직접 사용할 서식 지정
		  var      |  String    |  파싱한 결과를 지정할 변수 이름을 지정
		 
 		
 	 type 속성  : time, date, both 중 한가지 값을 가질 수 있으며 기본값은 date
 	 dataStyle : default, short, medium,long ,full 중 하나 가짐 기본값 default 
 	 timeStyle : default, short, medium,long ,full 중 하나 가짐 기본값 default 
 	 
 	 
 	 
   7 참고 소스 ] 
   
     Controller  :  JSPELController
     jsp : home/el
     ------------------------------------
     
     
   8. EL 함수 
   jstl은 표현 언어 (EL)에서 사용할 수 있는 함수를 제공
   
       1. EL 함수 목록
       
         fn:contains(str1,str2)
            > 지정된 문자열이 포함되 있는지 판단
            
         fn:containsIgnoreCase(str1,str2)
            > 지정된 문자열이 대소문자 구분하지 않고 포함되 있는지 판단
            
         fn:startsWith(str1,str2)
            > 지정된 문자열로 시작하는지 판단
            
         fn:endsWith(str1,str2)
            > 지정된 문자열로 끝나는지 판단
            
         fn:indexOf(str1,str2)
            > 지정한 문자열이 처음으로 나왓을 때의 인덱스 구함
            
         fn:length(obj)
            >  컬렉션 또는 배열의 요소 개수, 문자열 길이를 구합니다
            
         fn:escapeXml(str)
            >  지정한 문자열을 xml 구문으로 해석되지 않도록 이스케이프
            
         fn:replace(str,src,dest)
            >  문자열 치환
            
         fn:toLowerCase(str)
            >  문자열을 소문자로 변환
            
         fn:toUpperCase(str)
            >  문자열을 대문자로 변환
            
         fn:trim(str)
            >  문자열 양 끝 공백 제거 
            
         fn:substring(str,idx1,idx2)
            >  지정한 범위에 해당하는 문자열 잘라냄 
            
         fn:substringAfter(str1,str2)
            >  지정한 문자열에 일치하는 이후의 문자열 잘라냄
            
         fn:substringBefore(str1,str2)
            >  지정한 문자열에 일치하는 이전의 문자열 잘라냄
            
         fn:join(array,str)
           > 문자열을 구분자로 분할해서 하나의 문자열로 만듭니다
           
          fn:split(str1,str2)
            >문자열을 구분자로 분할해서 문자열 배열을 만든다
     
     
     
     
     
	       
			      